var documenterSearchIndex = {"docs":
[{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"EditURL = \"../../../examples/tuto_paper.jl\"","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"using Markdown#hide\ncd(@__DIR__)#hide","category":"page"},{"location":"examples/tuto_paper/#Multisite-daily-Stochastic-Weather-Generator","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"This tutorial describes the Stochastic Weather Generator describes in Interpretable Seasonal Hidden Markov Model for spatio-temporal stochastic rain generator in France by Emmanuel Gobet, David Métivier and Sylvie Parey. It provides a step by step construction of the Seasonal Hidden Markov Model (SHMM), the interpretation of the hidden states as Weather regimes over France and eventually the validation of the model with simulations.","category":"page"},{"location":"examples/tuto_paper/#Set-up","page":"Multisite daily Stochastic Weather Generator","title":"Set up","text":"","category":"section"},{"location":"examples/tuto_paper/#Package-and-functions","page":"Multisite daily Stochastic Weather Generator","title":"Package and functions","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"using CSV, JLD, DelimitedFiles # File Read/Load/Save\n\nusing DataFrames, DataFramesMeta # DataFrames\n\nusing Dates\n\nusing StatsBase, Random\n\nusing Distributions","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"The two main package are not yet registered to the official Julia registry. They can be either added through my local Julia registry with the LocalRegistry.jl. Or simply added via url i.e.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"import Pkg\nPkg.add(\"https://github.com/dmetivie/SmoothPeriodicStatsModels.jl\")\nPkg.add(\"https://github.com/dmetivie/StochasticWeatherGenerators.jl\")","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"using SmoothPeriodicStatsModels # Name might change. Small collection of smooth periodic models e.g. AR, HMM\n\nusing StochasticWeatherGenerators # interface to use with SmoothPeriodicStatsModels.jl","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"save_tuto_path = \"../../assets/tuto_1\"\n\nRandom.seed!(1234)","category":"page"},{"location":"examples/tuto_paper/#Settings-for-plotting","page":"Multisite daily Stochastic Weather Generator","title":"Settings for plotting","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Some settings to have nice plots and save cropped version of plots (necessary in some cases).","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"using StatsPlots, LaTeXStrings\nusing StatsPlots.PlotMeasures # To play with margin in Plots\n\ngr() # plotly() # for interactive plots\ndefault(thickness_scaling=1.2, fontfamily=\"Computer Modern\", linewidth=2, label=nothing, size=(1000, 600))\nscalefontsizes(1.5)\ncur_colors = get_color_palette(:auto, 100);\nmy_palette(K) = palette(vcat(cur_colors[1], [cur_colors[c] for c in 3:4], cur_colors[2]), K)\n\nfile_for_plot_utilities = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/plot_utilities.jl\")\ninclude(file_for_plot_utilities)","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"To plot maps, we use GeoMakie.jl + a hack with NaturalEarth.jl. This is still experimental. I used cartopy before with PyCall.jl which works very well.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"For the following code to work you will need to add the following packages","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"import Pkg\nPkg.add(\"HTTP\", \"JSON3\", \"GeoMakie\", \"CairoMakie\")","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"file_for_maps_with_geomakie = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/geo_makie_features.jl\") # download file from a GitHub repo\ninclude(file_for_maps_with_geomakie)","category":"page"},{"location":"examples/tuto_paper/#Global-Parameters","page":"Multisite daily Stochastic Weather Generator","title":"Global Parameters","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"plot(0:5)","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/plot_utilities/","page":"-","title":"-","text":"EditURL = \"../../../examples/plot_utilities.jl\"","category":"page"},{"location":"examples/plot_utilities/","page":"-","title":"-","text":"using StatsPlots\n\n\"\"\"\n    errorlinehist(y; kwargs)\n    Function for parsing inputs to easily make a [`ribbons`] (https://ggplot2.tidyverse.org/reference/geom_ribbon.html),\n    stick errorbar (https://www.mathworks.com/help/matlab/ref/errorbar.html), or plume\n    (https://stackoverflow.com/questions/65510619/how-to-prepare-my-data-for-plume-plots) with several histograms plot.\n\nInputs: default values are indicated with *s\n\ny is a Vector of vector\n\n    bins (*:auto*, AbstractVector)\n\n    norm (`Symbol` - *:false*, `:pdf`, `:probability`)\n\n    error_style (`Symbol` - *:ribbon*, :stick, :plume) - determines whether to use a ribbon style or stick style error\n     representation.\n\n    centertype (symbol - *:mean* or :median) - which approach to use to represent the central value of y at each x-value.\n\n    errortype (symbol - *:std*, :sem, :percentile) - which error metric to use to show the distribution of y at each x-value.\n\n    percentiles (Vector{Int64} *[25, 75]*) - if using errortype === :percentile then which percentiles to use as bounds.\n\n    secondarycolor (`Symbol`, `RGB`, `:matched` - *:Gray60*) - When using stick mode this will allow for the setting of the stick color.\n        If `:matched` is given then the color of the sticks with match that of the main line.\n\n    secondarylinealpha (float *.1*) - alpha value of plume lines.\n\n    numsecondarylines (int *100*) - number of plume lines to plot behind central line.\n\n    stickwidth (Float64 *.01*) - How much of the x-axis the horizontal aspect of the error stick should take up.\n\nExample\n\n```julia\nusing Distributions\n\ndist = Exponential()\nN = 100 # number of sample used in each histogram\nN_hist = 1000 # number of histogram\nyc = [rand(dist, N) for _ in 1:N_hist]\n\nedges = 0:0.05:11.1\n\nerrorlinehist(yc, errortype = :percentile, percentiles = [0,100], fillalpha = 0.1, normalize = :pdf, bins = edges)\n```\n\"\"\"\n@userplot ErrorLineHist\n\n@recipe function f(p::ErrorLineHist)\n    v = p.args[1]\n    bins = get(plotattributes, :bins, :auto)\n    normed = get(plotattributes, :normalize, false)\n    weights = get(plotattributes, :weights, nothing)\n\n    vs = filter.(isfinite, (reduce(vcat,v),))\n    edges = Plots._hist_edges(vs, bins)\n    nbins = length(edges[1]) .- 1\n    x = edges[1][1:end-1]\n\n    ngroups = length(v)\n\n    # compute weights (frequencies) by group using those edges\n    y = zeros(nbins, ngroups)\n    for i in 1:ngroups\n        v_i = filter(isfinite, v[i])\n        w_i = weights\n        h_i = Plots._make_hist((v_i,), edges; normed = normed, weights = w_i)\n        y[:, i] += h_i.weights .+ eps() # for numerical stability when in log-scale\n    end\n\n    StatsPlots.ErrorLine((x, y))\nend\n\n\"\"\"\n    islabel(j, j_target, label)\nUtilities to only display label on target subplots\n```julia\nusing Plots\nplt = [plot(1:10, label = islabel(j, [5,4], \"label\")) for j in 1:4]\nplot(plt...)\n```\n\"\"\"\nislabel(j, j_target, label) = j ∈ j_target ? label : :none\n\nislabel(j, j_target, label, other_option) = j ∈ j_target ? label : :other_option\n\n\"\"\"\n    savefigcrop(plt, path)\nSave the figure and crop it to avoid white spaces\n\"\"\"\nfunction savefigcrop(plt, save_name)\n    isnothing(plt) ? savefig(string(save_name, \".pdf\")) : savefig(plt, string(save_name, \".pdf\"))\n    run(`pdfcrop $(string(save_name,\".pdf\"))`) # Petit délire pour croper proprement la figure\n    mv(string(save_name, \"-crop\", \".pdf\"), string(save_name, \".pdf\"), force=true)\nend\n\nsavefigcrop(save_name) = savefigcrop(nothing, save_name)\n\nker(u) = 3 / 4 * (1 - abs(u)^2)\n\n\"\"\"\n    cyclic_moving_average(a::AbstractArray, window::AbstractVector)\n    cyclic_moving_average(a::AbstractArray, window::Integer)\nSimple periodic moving average with Epanechnikov kernel.\n\"\"\"\nfunction cyclic_moving_average(A::AbstractArray, t::AbstractVector, T::Integer, window)\n    a = zeros(T)\n    a[t] .= A\n    return cyclic_moving_average(a, window)\nend\n\ncyclic_moving_average(a::AbstractArray, window::Integer) = cyclic_moving_average(a, -window:window)\n\nfunction cyclic_moving_average(a::AbstractArray, window::AbstractVector)\n    W = length(window)\n    @assert W ≥ 1\n    T = length(a)\n    tot_weight = sum(ker(i / W) for i in window)\n    return [sum(a[cyclic(t+i, T)] * ker(i / W) for i in window) for t = 1:T] / tot_weight\nend\n\nfunction cyclic(i, T)\n    if 1≤i≤T\n        return i\n    elseif T+1≤i≤2T\n        return i - T\n    elseif -T+1≤i≤0\n        return T + i\n    end\nend","category":"page"},{"location":"examples/plot_utilities/","page":"-","title":"-","text":"","category":"page"},{"location":"examples/plot_utilities/","page":"-","title":"-","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#StochasticWeatherGenerators.jl","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"Documentation for StochasticWeatherGenerators.jl","category":"page"},{"location":"#Index","page":"StochasticWeatherGenerators.jl","title":"Index","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"Modules = [StochasticWeatherGenerators]","category":"page"},{"location":"#SmoothPeriodicStatsModels.fit_mle_stations-Tuple{DataFrames.DataFrame, Vararg{Any, 4}}","page":"StochasticWeatherGenerators.jl","title":"SmoothPeriodicStatsModels.fit_mle_stations","text":"fit_mle_stations(df::DataFrame, K, T, degree, local_order)\n\nGiven a\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.VCX3","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.VCX3","text":"VCX3(y, idxs; nb = 3)\n\nYearly Max of nb = 3 days sliding mean for y. Here idxs can be a vector of vector (or range) corresponds to the index of every year.\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\nyear_range = unique(year.(time_range))\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nidx_year = [findall(x-> year.(x) == m, df[:, :DATE]) for m in year_range]\nVCX3(df.Temperature, idx_year)\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.VCX3-Tuple{DataFrames.DataFrame}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.VCX3","text":"VCX3(df; y_col, nb = 3)\n\nYearly Max of nb = 3 days sliding mean for y for every year.  By default, y_col is the first column not with a Date type\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nVCX3(df)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.collect_data_ECA","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.collect_data_ECA","text":"collect_data_ECA(STAID::Integer, path::String, var::String=\"RR\"; skipto=19, header = 18)\n\npath gives the path where all data files are stored in a vector\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.collect_data_ECA-2","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.collect_data_ECA","text":"collect_data_ECA(STAID, date_start::Date, date_end::Date, path::String, var::String=\"RR\"; portion_valid_data=1, skipto=19, header = 18, return_nothing = true)\n\npath gives the path where all data files are stored in a vector\nFilter the DataFrame s.t. date_start ≤ :DATE ≤ date_end\nvar = \"RR\", \"TX\" etc.\nportion_valid_data is the portion of valid data we are ok with. If we don't want any missing, fix it to 1.\nskipto and header for csv files with meta informations/comments at the beginning of files. See CSV.jl.\nreturn_nothing if true it will return nothing is the file does not exists or does not have enough valid data.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.corTail","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.corTail","text":"corTail(x::AbstractMatrix, q = 0.95)\n\nCompute the (symmetric averaged) tail index matrix M of a vector x, i.e. M[i, j] = (ℙ(x[:,j] > Fxⱼ(q) ∣ x[:,i] > Fxᵢ(q)) + ℙ(x[:,i] > Fxᵢ(q) ∣ x[:,j] > Fxⱼ(q)))/2 where Fx(q) is the CDF of x. Note it uses the same convention as cor function i.e. observations in rows and features in colums.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.cor_groupby-Tuple{DataFrames.DataFrame, Any, Any, Integer}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cor_groupby","text":"Compute and fit the `cor` between two `var` with a smooth function for each `z`.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.cor_groupbyTXTN-Tuple{DataFrames.DataFrame, Integer}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cor_groupbyTXTN","text":"Compute and fit the `cor` between `:TX` and `:TX-:TN` with a smooth function for each `z`.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.cov_RR-Tuple{AbstractArray{<:DataFrames.DataFrame}, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cov_RR","text":"cov_RR(dfs::AbstractArray{<:DataFrame}, K)\n\nEach df must have :DATE, :RR, :z (same :z for each df)\n\nΣ²RR = cov_rain(data_stations, K)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.cov_ar1-Tuple{AbstractArray{<:DataFrames.DataFrame}, Any, Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cov_ar1","text":"Fit residual to constant (in time) cov matrices for each weather regime Example:\n\ncov_ar1(data_stations, ar1sTX, :TX, K)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.cum_monthly","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cum_monthly","text":"cum_monthly(y::AbstractArray, idxs)\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\nyear_range = unique(year.(time_range))\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nidx_year = [findall(x-> year.(x) == m, df[:, :DATE]) for m in year_range]\nidx_month = [findall(x-> month.(x) == m, df[:, :DATE]) for m in 1:12]\nidx_all = [intersect(yea, mon) for yea in idx_year, mon in idx_month]\ncum_monthly(y, idx_all)\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.distance_x_to_y-Tuple{Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.distance_x_to_y","text":"distance_x_to_y\n\nDistance in km between two stations.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.dms_to_dd-Tuple{Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.dms_to_dd","text":"dms_to_dd(l)\n\nConvert Degrees Minutes Seconds to Decimal Degrees. Inputs are strings of the form\n\nLAT    : Latitude in degrees:minutes:seconds (+: North, -: South)\nLON    : Longitude in degrees:minutes:seconds (+: East, -: West)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.fit_mle_RR-Tuple{DataFrames.DataFrame, Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.fit_mle_RR","text":"fit_mle_RR(df::DataFrame, K, local_order; maxiter=5000, tol=2e-4, robust=true, silence=true, warm_start=true, display=:none, mix₀=mix_ini(T))\n\nmix_allE = fit_mle_RR.(data_stations, K, local_order)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.joint_rain","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.joint_rain","text":"joint_rain(M::AbstractMatrix, j1::Integer, j2::Integer, r = 0)\n\nSelect all the rows of M with values for (two) colums above some value r.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.longuest_spell-Tuple{AbstractArray}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.longuest_spell","text":"longuest_spell(y::AbstractArray; value=0)\n\nCompute the length of the longuest consecutive sequence of value in y\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.my_color-Tuple{Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.my_color","text":"my_color(k, K)\n\nConvenience for plot colors and hidden states to blue for k=1 (∼wetter)  and orange for k=K (∼driest)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.pmf_spell-Tuple{AbstractVector, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.pmf_spell","text":"pmf_spell(y::AbstractVector, value)\n\nReturn the distribution of spells (consecutive sequence of with the same value) length of value in y\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.rand_RR-Tuple{AbstractArray{<:Distributions.MixtureModel}, AbstractVector, AbstractVector, AbstractArray, AbstractArray}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.rand_RR","text":"rand_RR(mixs::AbstractArray{<:MixtureModel}, n2t::AbstractVector, z::AbstractVector, y::AbstractMatrix, Σk::AbstractArray)\n\nGenerate a (nonhomegenous) sequence of length length(n2t) of rain amounts conditionally to a given dry/wet matrix y and (hidden) state sequence z. Univariate distribution are given by mixs while correlations are given by covariance matrix Σk.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.rand_cond-NTuple{6, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.rand_cond","text":"rand_cond(ϵ, z, θ_uni, θ_cor, n2t, T)\n\nGenererate a random variable conditionnaly to another one Using Copula\n\nX_1 mid X_2 = ϵ sim mathbbNleft(mu_1 + dfracsigma_1sigma_2rho (a - mu_2) (1-rho^2)sigma_1^2 right)\n\nFor two N(0,1)\n\nX_1 mid X_2 = ϵ sim mathbbNleft(rho a  (1-rho^2) right)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.select_in_range_df-Tuple{Any, Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.select_in_range_df","text":"select_in_range_df(datas, start_Date, interval_Date, [portion])\n\nSelect station with some data availability in dates and quality (portion of valid data).  Input is a vector (array) of DataFrame (one for each station for example) or a Dict of DataFrame. If 0 < portion ≤ 1 is specified, it will authorize some portion of data to be missing.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.shortname-Tuple{AbstractString}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.shortname","text":"shortname(name::String)\n\nExperimental function that returns only the most relevant part of a station name.\n\nlong_name = \"TOULOUSE-BLAGNAC\"\nshortname(long_name) # \"TOULOUSE\"\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.Σ_Kendall2Pearson-Tuple{AbstractMatrix}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.Σ_Kendall2Pearson","text":"Σ_Kendall2Pearson(M::AbstractMatrix)\n\nCompute the Pearson correlation coefficient i.e. the classic one from the Kendall correlation #TODO Add ref\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.Σ_Spearman2Pearson-Tuple{AbstractMatrix}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.Σ_Spearman2Pearson","text":"Σ_Spearman2Pearson(M::AbstractMatrix)\n\nCompute the Pearson correlation coefficient i.e. the classic one from the Spearman correlation #TODO Add ref\n\n\n\n\n\n","category":"method"}]
}
