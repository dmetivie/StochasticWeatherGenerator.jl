var documenterSearchIndex = {"docs":
[{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"EditURL = \"../../../examples/tuto_paper.jl\"","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"using Markdown\ncd(@__DIR__)#hide","category":"page"},{"location":"examples/tuto_paper/#Set-up","page":"Set up","title":"Set up","text":"","category":"section"},{"location":"examples/tuto_paper/#Package-and-functions","page":"Set up","title":"Package and functions","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"using CSV, JLD, DelimitedFiles # File Read/Load/Save\n\nusing DataFrames, DataFramesMeta # DataFrames\n\nusing Dates\n\nusing StatsBase, Random\n\nusing Distributions\n\nusing SmoothPeriodicStatsModels # Name might change. Small collection of smooth periodic models e.g. AR, HMM\n\nusing StochasticWeatherGenerators # interface to use with SmoothPeriodicStatsModels\n\nusing StatsPlots, LaTeXStrings","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Random.seed!(1234)","category":"page"},{"location":"examples/tuto_paper/#Settings-for-plotting","page":"Set up","title":"Settings for plotting","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"gr()\ndefault(thickness_scaling=1.2, fontfamily=\"Computer Modern\", linewidth=2, label=nothing, size=(1000, 600))\nscalefontsizes(1.5)","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"For map plot, we use GeoMakie.jl + a hack with NaturalEarth.jl","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"file_for_maps_with_geomakie = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/geo_makie_features.jl\") # download file from a GitHub repo\ninclude(file_for_maps_with_geomakie)","category":"page"},{"location":"examples/tuto_paper/#Data-files","page":"Set up","title":"Data files","text":"","category":"section"},{"location":"examples/tuto_paper/#Global-Parameters","page":"Set up","title":"Global Parameters","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Number of day in a year (choice here is 366)","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"T = 366","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Define the French area for map (Longitude and latitudes) plot and the precision of the map precision_scale","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"precision_scale = \"50m\"\n\n\nLON_min = -5 # West\n\n\nLON_max = 10 # Est\n\n\nLAT_min = 41 # South\n\n\nLAT_max = 52 # North","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"conversion_factor for rain amounts RR in 0.1 mm to mm","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"conversion_factor = 0.1 # 0.1 mm -> mm","category":"page"},{"location":"examples/tuto_paper/#HMM-Hyperparameters","page":"Set up","title":"HMM Hyperparameters","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Number of hidden states","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"K = 4\n\n\ncur_colors = get_color_palette(:auto, 100);\n\n\nmy_palette(K) = palette(vcat(cur_colors[1], [cur_colors[c] for c in 3:4], cur_colors[2]), K)\n\n\nmy_pal = my_palette(K); # just colors I like for plotting weather regime!\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Degree 𝐃𝐞𝐠 of the trigonometric expansion It could be an array different for each station and variables. Not implemented yet though.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"𝐃𝐞𝐠 = 2","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Local memory order i.e. at station j, mathbbP(Y_n^(j) = y_n^(j) mid Z = k Y_n-1^(j) = y_n-1^(j) cdots Y_n-textttlocal memory^(j) = y_n-textttlocal memory^(j))","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"local_order = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"note: Note\nThe local_order could be a vector/matrix of size D and different for each station, and also different depending on wet or dry past. Indeed it has been noted, TODO add ref, that dry spells have longer memory.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"size_order = 2^local_order\n\n\nprintln(\"K = $K, \", \"local_order = $local_order, \", \"degree = $𝐃𝐞𝐠\")","category":"page"},{"location":"examples/tuto_paper/#Data","page":"Set up","title":"Data","text":"","category":"section"},{"location":"examples/tuto_paper/#Select-relevant-stations-from-the-station.txt-file","page":"Set up","title":"Select relevant stations from the station.txt file","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Here we","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"remove white space at the right of the CN, STANAME which is caused by imperfect CVS importation\nSelect only the stations with 100% valid data for the period Date(1955,12,31) ≤ :DATE ≤ Date(2019,12,31)\nShorten station names #TODO improve this function (maybe impose max string instead of all 'if')","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    station_file = Base.download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/weather_files/stations.txt\")\n    station_all = CSV.read(station_file, DataFrame, header = 18, normalizenames=true, ignoreemptyrows=true)\n    station_all = @chain station_all begin\n        @transform(:CN = rstrip.(:CN), :STANAME = rstrip.(:STANAME))\n        @subset(:CN .∈ tuple([\"FR\", \"BE\", \"LU\", \"CH\"]))\n        @subset(:STAID .∈ tuple([32, 33, 34, 36, 39, 203, 322, 323, 434, 736, 737, 738, 740, 742, 745, 749, 750, 755, 756, 757, 758, 786, 793, 2192, 2203, 2205, 2207, 2209, 11244, 11245, 11247, 11249]))\n        @transform(:STANAME = shortname.(:STANAME))\n    end\nend\n\nselected_station_name = [\"BOURGES\", \"TOULOUSE\", \"MARIGNANE\", \"LUXEMBOURG\", \"LILLE\", \"EMBRUN\", \"BASTIA\", \"LA HAGUE\", \"CHASSIRON\", \"ORLY\"]\n\n\nstation = @subset(station_all, :STANAME .∈ tuple(selected_station_name))\n\n\nSTAID = station.STAID #[32, 33, 39, 203, 737, 755, 758, 793, 11244, 11249];\n\n\nstation_name = station.STANAME","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Sort stations (index) by latitude. It is useful for plotting from North to South.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"staid_lat = sortperm(station.LAT, rev=true);\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Station number","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"D = length(STAID)","category":"page"},{"location":"examples/tuto_paper/#Date-range","page":"Set up","title":"Date range","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"date_start = Date(1956)","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Date including the previous days used in the initial condition (in case local_memory > 0)","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"date_start_w_memory = date_start - Day(local_order)\n\n\ndate_end = Date(2020) - Day(1)\n\n\nevery_year = date_start:Day(1):date_end\n\n\nevery_year_w_memory = date_start_w_memory:Day(1):date_end\n\n\nn2t = dayofyear_Leap.(every_year)\n\n\nN = length(n2t)","category":"page"},{"location":"examples/tuto_paper/#Treat-data","page":"Set up","title":"Treat data","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Load into DataFrames the (ECA) RR files (rain). It filters by date and valid data. It also add a column of rain event (0: dry, 1: wet).","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    data_stations = collect_data_ECA.(STAID, date_start_w_memory, date_end, \"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/weather_files/ECA_blend_rr/RR_\", portion_valid_data=1, skipto=22, header = 21, url = true)\n    for i = eachindex(data_stations)\n        @transform!(data_stations[i], :bin = onefy.(:RR))\n    end\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Binary matrix version of rain event at the D stations.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"𝐘all = BitMatrix(reduce(hcat, [data_stations[j].bin for j = 1:D]))\n\n\n𝐘_past = BitMatrix(𝐘all[1:local_order, :]) # rand(Bool, local_order, D)\n\n\nξ = [1; zeros(K - 1)];  # 1 jan 1956 was most likely a type Z = 1 wet day all over France\n\n\n𝐘 = 𝐘all[1+local_order:end, :]","category":"page"},{"location":"examples/tuto_paper/#Map-of-stations","page":"Set up","title":"Map of stations","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Convert LAT DMS into DD which seems most widly accepted format.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"LAT_idx = dms_to_dd.(station.LAT)\n\n\nLON_idx = dms_to_dd.(station.LON)\n\n\nlong_spell = [longuest_spell(y) for y in eachcol(𝐘)]\n\n\nmap_with_stations(LON_idx, LAT_idx, long_spell; station_name=station_name, show_value=true, colorbar_show=true)","category":"page"},{"location":"examples/tuto_paper/#Fit-the-seasonal-HMM","page":"Set up","title":"Fit the seasonal HMM","text":"","category":"section"},{"location":"examples/tuto_paper/#Fit-slice:-naive-estimation","page":"Set up","title":"Fit slice: naive estimation","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"note: Note\nBefore inferring the HMM parameters with EM (Baum-Welch) algorithm, we do a first naive inference that will be used as initial condition for the EM.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Reference station ref_station used to sort hidden state for the slide initialization Here we choose j=1 to STAID=32 to BOURGES because it is a central station for France","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"ref_station = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"This generate a random Periodic HMM that we then fit slice by slice (day by day). See paper.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"hmm_random = randhierarchicalPeriodicHMM(K, T, D, local_order; ξ=ξ, ref_station=ref_station);\n\n\n@time \"FitMLE SHMM (Slice)\" hmm_slice = fit_mle_all_slices(hmm_random, 𝐘, 𝐘_past; n2t=n2t, robust=true, rand_ini=true, Dirichlet_α=0.8, history=false, n_random_ini=1, 𝐘ₜ_extanted=[-12, -7, 0, 6, 13]);\n\n\nθᴬ_slice, θᴮ_slice = fit_θ!(hmm_slice, 𝐃𝐞𝐠);\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Fit-with-Baum-Welch-using-slice-estimate-as-starting-point","page":"Set up","title":"Fit with Baum Welch using slice estimate as starting point","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"With the Slice estimate as a good starting point for the full (seasonal) Baum Welch EM algorithm we fit the model!","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"@time \"FitMLE SHMM (Baum Welch)\" hmm_fit, θq_fit, θy_fit, hist, histo_A, histo_B = fit_mle(hmm_slice, θᴬ_slice, θᴮ_slice, 𝐘, 𝐘_past,\n    maxiter=10000, robust=true; display=:iter, silence=true, tol=1e-3, θ_iters=true, n2t=n2t);\n# On my computer\n# Iteration 73: logtot = -116791.100655, max(|θᴬᵢ-θᴬᵢ₋₁|) = 0.0002 & max(|θᴮᵢ-θᴮᵢ₋₁|) = 0.00103\n# EM converged in 73 iterations, logtot = -116791.10065504618\n# FitMLE SHMM (Baum Welch): 36.161685 seconds (185.76 M allocations: 32.581 GiB, 6.77% gc time, 10.09% compilation time)\n\nsave_tuto_path = \"../../assets/tuto_1\"\n\nsave(joinpath(save_tuto_path,\"hmm_fit_K_$(K)_d_$(𝐃𝐞𝐠)_m_$(local_order).jld\"), \"hmm\", hmm_fit, \"hist\", hist, \"Q_param\", θq_fit, \"Y_param\", θy_fit)","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Uncomment to load previously computed hmm","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"# hmm_infos = load(\"save/hmm_fit.jld\")\n# hmm_fit = hmm_infos[\"hmm\"]\n# hist = hmm_infos[\"hist\"]\n# θq_fit = hmm_infos[\"Q_param\"]\n# θy_fit = hmm_infos[\"Y_param\"]","category":"page"},{"location":"examples/tuto_paper/#Visualisation-of-the-HMM-parameters","page":"Set up","title":"Visualisation of the HMM parameters","text":"","category":"section"},{"location":"examples/tuto_paper/#Transition-matrix","page":"Set up","title":"Transition matrix","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    pA = [plot(legendfont=14, foreground_color_legend=nothing, background_color_legend=nothing) for k in 1:K]\n    for k in 1:K\n        [plot!(pA[k], hmm_fit.A[k, l, :], c=my_color(l, K), label=L\"Q_{%$(k)\\to %$(l)}\", legend=:topleft) for l in 1:K]\n        hline!(pA[k], [0.5], c=:black, label=:none, s=:dot)\n        xticks!(pA[k], vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366), vcat(string.(monthabbr.(1:12)), \"\"), xlims=(0, 367), xtickfontsize=10, ylims=(0, 1))\n    end\n    pallA = plot(pA..., size=(1000, 500))\n    # savefig(pallA, \"save/Q_transition_memo_1_K_4_d_2.pdf\")\nend","category":"page"},{"location":"examples/tuto_paper/#Rain-probabilities","page":"Set up","title":"Rain probabilities","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    mm = 1\n    jt = D\n    pB = [plot(legendfont=14, title=\"$(station_name[j])\", titlefontsize=16) for j in 1:jt]\n    for j in 1:jt\n        [plot!(pB[j], succprob.(hmm_fit.B[k, :, j, mm]), c=my_color(k, K), label=:none) for k in 1:K]\n        hline!(pB[j], [0.5], c=:black, label=:none, s=:dot)\n        xticks!(\n            pB[j],\n            vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366),\n            vcat(string.(monthabbr.(1:12)), \"\"), xtickfontsize=10\n        )\n        xlims!(pB[j], (0, 367))\n        ylims!(pB[j], (0, 1))\n    end\n    pallB = plot(pB[staid_lat]..., size=(3000 / 1.25, 1000 / 1.25), layout=(2, 5))\n    # savefig(pallB, \"save/proba_rain_all_station.pdf\")\nend","category":"page"},{"location":"examples/tuto_paper/#Spatial-Rain-probability","page":"Set up","title":"Spatial Rain probability","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"memory_past_cat = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"h = 1 (day before dry) or 2 (day before wet) mathbbP(Y = textRainmid Z = k H = h) with h = %memory_past_cat","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"p_FR_map_mean_prob = map_with_stations(LON_idx, LAT_idx, [[mean(succprob.(hmm_fit.B[k, :, j, memory_past_cat])) for j in 1:length(STAID)] for k in 1:K], colorbar_show=true)","category":"page"},{"location":"examples/tuto_paper/#Inference-of-the-historical-hidden-states","page":"Set up","title":"Inference of the historical hidden states","text":"","category":"section"},{"location":"examples/tuto_paper/#Viterbi-algorithm","page":"Set up","title":"Viterbi algorithm","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"ẑ = viterbi(hmm_fit, 𝐘, 𝐘_past; n2t=n2t)\n\n\ndata_stations_z = map(data_stations) do df\n    @transform(df, :z = [fill(missing, local_order); ẑ])\nend\n\n\nẑ_per_cat = [findall(ẑ .== k) for k in 1:K]\n\n\nCSV.write(joinpath(save_tuto_path,\"z_hat_K_$(K)_d_$(𝐃𝐞𝐠)_m_$(local_order).csv\"), DataFrame([:DATE, :z] .=> [data_stations[1].DATE[1+local_order:end], ẑ]))","category":"page"},{"location":"examples/tuto_paper/#Visualisation-of-the-Historical-sequences-of-hidden-states","page":"Set up","title":"Visualisation of the Historical sequences of hidden states","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"year_range = unique(year.(data_stations[1][1+local_order:end, :DATE]));\n\n\nidx_year = [findall(x -> year.(x) == m, data_stations[1][1+local_order:end, :DATE]) for m in year_range];\n\n\nselect_year = unique(sort([4:10:length(year_range); 21; 48; 64]))\n\nbegin\n    year_nb = length(select_year)\n    z_hat_mat = zeros(year_nb, 366)\n\n    for (i, y) in enumerate(select_year)\n        if isleapyear(year_range[y])\n            z_hat_mat[i, :] = ẑ[idx_year[y]]\n        else\n            z_hat_mat[i, :] = [ẑ[idx_year[y]]; 0]\n        end\n    end\n    thick = 1\n    heatmap(z_hat_mat, colorbar=:none, c=my_palette(K), minorticks=:false, framestyle=:xbox, grid=:none, thickness_scaling=thick)\n    xticks!(vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366), vcat(string.(monthabbr.(1:12)), \"\"), xlims=(0, 367), xtickfontsize=14 / thick, ytickfontsize=14 / thick)\n    hline!((1:year_nb) .+ 0.5, c=:black, legend=:none, lw=4)\n    ylims!(0.5, year_nb + 0.5)\n    pviterbi = yticks!(1:year_nb, string.(year_range[select_year]))\n    # savefig(pviterbi, \"save/temporal_1959_2009.pdf\")\nend","category":"page"},{"location":"examples/tuto_paper/#Adding-Rain-amounts-to-the-model","page":"Set up","title":"Adding Rain amounts to the model","text":"","category":"section"},{"location":"examples/tuto_paper/#Marginal-fit","page":"Set up","title":"Marginal fit","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"We fit the marginals at each station independently. We use a mixture of exponential functions whose parameters evolve smoothly and periodically TODO: put equation","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"@time \"FitMLE RR\" mix_allE = fit_mle_RR.(data_stations_z, K, local_order, mix₀=StochasticWeatherGenerators.mix_ini(T))\n# FitMLE RR: 66.104980 seconds (339.13 M allocations: 47.931 GiB, 5.53% gc time, 4.18% compilation time)\n\nsave(joinpath(save_tuto_path,\"rain_mix.jld\"), \"mix2Exp\", mix_allE)","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Note that we don't need anymore to fit quantile functions, as Distributions.jl PR #1389 (September 2nd, 2021) handles that. I did my approach (to save interpolate quantile) few months prior to this PR. It would have saved me some times!","category":"page"},{"location":"examples/tuto_paper/#Rain-correlations","page":"Set up","title":"Rain correlations","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"We fit a Gaussian copula to each pair of stations for joint rainy days only.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"caution: Caution\nWhen the number of hidden states is getting larger, it migth happen that for some pair of stations there are no simulteneous rain occurence in a rain category Z = k. In that case a missing coefficient is returned.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    Σ²RR = cov_RR(data_stations_z, K)\n    if K == 4\n        Σ²RR[2][6, 3] = Σ²RR[4][6, 3]\n        Σ²RR[2][3, 6] = Σ²RR[4][6, 3]\n    end\n    Σ²RR = convert.(Matrix{Float64}, Σ²RR)\nend\n\nif K == 4\n    @warn \"For Embrun j=6 and Marignane j=3 the hidden state Z=2 and Z=4 are pretty similar (dry), so we replace the `missing` coefficient of Z=2 with the one of Z = 4\"\nend","category":"page"},{"location":"examples/tuto_paper/#Simulation","page":"Set up","title":"Simulation","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Now we are ready to generate samples from the SWG model.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Nb is the number of realization","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Nb = 1000","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Sample the (seasonal) HMM model and output the sequence of hidden states and multi-site dry/wet.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    zs = zeros(Int, N, Nb)\n    ys = zeros(Bool, N, D, Nb)\n    @time \"Simulations Z, Y\" for i in 1:Nb\n        zs[:, i], ys[:, :, i] = rand(hmm_fit, n2t; y_ini=𝐘all[1:local_order, :], z_ini=1, seq=true)\n    end\nend\n# Simulations Z, Y: 34.998679 seconds (328.41 M allocations: 32.166 GiB, 8.24% gc time, 1.16% compilation time)","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Given the hidden states and dry/wet, it generates the rain amounts at each stations (correlated with a Gaussian Copula).","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    rs = zeros(D, N, Nb)\n    @time \"Simulations RR\" for i in 1:Nb\n        rs[:, :, i] = rand_RR(mix_allE, n2t, zs[:, i], ys[:, :, i]', Σ²RR)\n    end\nend\n# Simulations RR: 164.912113 seconds (299.73 M allocations: 43.020 GiB, 2.67% gc time, 0.54% compilation time)","category":"page"},{"location":"examples/tuto_paper/#Results","page":"Set up","title":"Results","text":"","category":"section"},{"location":"examples/tuto_paper/#Spell-distribution","page":"Set up","title":"Spell distribution","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"select_month to chose the month where to compute the spells distributions (summer month, winter, etc.) select_month = 1:12 corresponds to all month.","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"select_month = 1:12\n\nidx_months = [findall(x -> month.(x) == m, data_stations[1][1+local_order:end, :DATE]) for m in 1:12]\n\n\nidx_month_vcat = vcat(idx_months[select_month]...)\n\n\nidx_all = [intersect(yea, mon) for yea in idx_year, mon in idx_months];\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Historic-spells","page":"Set up","title":"Historic spells","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"len_spell_hist = [pmf_spell(𝐘[idx_month_vcat, j], dw) for j in 1:D, dw in 0:1];\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Simulation-spells","page":"Set up","title":"Simulation spells","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"len_spell_simu = [pmf_spell(ys[idx_month_vcat, j, i], dw) for i in 1:Nb, j in 1:D, dw in 0:1];\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Dry-spell","page":"Set up","title":"Dry spell","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"make_range(y, step=1) = range(extrema(y)..., step=step)\n\n\nbegin\n    dw_dry = 1 # dry\n    p_spell_dry = [plot(yaxis=:log10, ylims=(1e-4, 1e-0), ytickfontsize=13, xtickfontsize=13) for j = 1:D]\n    for j = 1:D\n        [stephist!(p_spell_dry[j], len_spell_simu[i, j, dw_dry], alpha=0.15, c=:grey, label=:none, norm=:probability, bins=make_range(len_spell_simu[i, j, dw_dry])) for i = 1:Nb]\n        stephist!(p_spell_dry[j], len_spell_hist[j, dw_dry], label=:none, c=:blue, lw=1.5, norm=:probability, bins=make_range(len_spell_hist[j, dw_dry]))\n        xlims!(p_spell_dry[j], 0, 2 + maximum(1.5maximum.(len_spell_hist[j, dw_dry])))\n    end\n\n    [plot!(p_spell_dry[j], xlabel=\"Nb of days\", xlabelfontsize=16) for j in staid_lat[6:10]]\n    [plot!(p_spell_dry[j], ylabel=\"PMF\", ylabelfontsize=16) for j in staid_lat[[1, 6]]]\n    [title!(p_spell_dry[j], station_name[j], titlefontsize=16) for j = 1:D]\n    pall_spell_dry = plot(p_spell_dry[staid_lat]..., size=(3000 / 1.5, 1000 / 1.25), layout=(2, 5))\n    # savefig(pall_spell_dry, \"save/spell_steppost_dry_c1.pdf\")\nend","category":"page"},{"location":"examples/tuto_paper/#Wet-spell","page":"Set up","title":"Wet spell","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    dw_wet = 2 # wet\n    p_spell_wet = [plot(yaxis=:log10, ylims=(1e-4, 1e-0), ytickfontsize=13, xtickfontsize=13) for j = 1:D]\n    for j = 1:D\n        [stephist!(p_spell_wet[j], len_spell_simu[i, j, dw_wet], alpha=0.15, c=:grey, label=:none, norm=:probability, bins=make_range(len_spell_simu[i, j, dw_wet])) for i = 1:Nb]\n        stephist!(p_spell_wet[j], len_spell_hist[j, dw_wet], label=:none, c=:blue, lw=1.5, norm=:probability, bins=make_range(len_spell_hist[j, dw_wet]))\n        xlims!(p_spell_wet[j], 0, 2 + maximum(1.5maximum.(len_spell_hist[j, dw_wet])))\n    end\n\n    [plot!(p_spell_wet[j], xlabel=\"Nb of days\", xlabelfontsize=16) for j in staid_lat[6:10]]\n    [plot!(p_spell_wet[j], ylabel=\"PMF\", ylabelfontsize=16) for j in staid_lat[[1, 6]]]\n\n    [title!(p_spell_wet[j], station_name[j], titlefontsize=16) for j = 1:D]\n    pall_spell_wet = plot(p_spell_wet[staid_lat]..., size=(3000 / 1.5, 1000 / 1.25), layout=(2, 5))\n    # savefig(pall_spell_wet, \"save/spell_steppost_wet_c1.pdf\")\nend","category":"page"},{"location":"examples/tuto_paper/#Rain","page":"Set up","title":"Rain","text":"","category":"section"},{"location":"examples/tuto_paper/#Interpretation:-Mean-Rain-per-weather-regime","page":"Set up","title":"Interpretation: Mean Rain per weather regime","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    p_rainpercat = [plot(ytickfontsize=16, xtickfontsize=14) for j = 1:D]\n    for j = 1:D\n        [plot!(p_rainpercat[j], 1:T, t -> conversion_factor * mean(mix_allE[j][k, t]), label=:none, c=my_color(k, K), lw=1.5) for k in 1:K]\n    end\n    # [plot!(p_rainpercat[j], xlabel=\"Rain (mm/day)\", xlabelfontsize=4) for j in staid_lat[6:10]]\n    [plot!(p_rainpercat[j], ylabel=\"Rain (mm/day)\", ylabelfontsize=17) for j in staid_lat[[1, 6]]]\n    [xticks!(\n        p_rainpercat[j],\n        vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366),\n        vcat(string.(first.(string.(monthabbr.(1:12))))), xtickfontsize=10\n    ) for j in 1:D]\n    [title!(p_rainpercat[j], station_name[j], titlefontsize=16) for j = 1:D]\n    plot(p_rainpercat[staid_lat]..., size=(3000 / 1.5, 1000 / 1.25), layout=(2, 5))\n    # savefig(\"dist_steppost_rain.pdf\")\nend","category":"page"},{"location":"examples/tuto_paper/#Univariate-Rain-distributions","page":"Set up","title":"Univariate Rain distributions","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"Historical vs %Nb simulations distribution","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"begin\n    p_uniR = [plot(yaxis=:log10, ylims=(1e-4, 1e-0), ytickfontsize=11, xtickfontsize=10) for j = 1:D]\n    for j = 1:D\n        [stephist!(p_uniR[j], conversion_factor * filter(!iszero, rs[j, :, i]), alpha=0.15, c=:grey, label=:none, norm=:pdf) for i = 1:Nb]\n        stephist!(p_uniR[j], conversion_factor * filter(!iszero, data_stations[j].RR), label=:none, c=:blue, lw=1.5, norm=:pdf)\n        xlims!(p_uniR[j], 0.0, Inf)\n    end\n    [plot!(p_uniR[j], xlabel=\"Rain (mm/day)\", xlabelfontsize=12) for j in staid_lat[6:10]]\n    [plot!(p_uniR[j], ylabel=\"PDF\", ylabelfontsize=12) for j in staid_lat[[1, 6]]]\n\n    [title!(p_uniR[j], station_name[j], titlefontsize=12) for j = 1:D]\n\n    pall_R = plot(p_uniR[staid_lat]..., size=(1100, 500), layout=(2, 5))\nend","category":"page"},{"location":"examples/tuto_paper/#Monthly-quantile-amount","page":"Set up","title":"Monthly quantile amount","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"rh = reduce(hcat, [df[1+local_order:end, :RR] for df in data_stations])\n\n\nmonth_rain_simu = [cum_monthly(rs[j, :, i], idx_all) for j in 1:D, i in 1:Nb];\n\n\nmonth_rain_histo = [cum_monthly(rh[:, j], idx_all) for j in 1:D]\n\n\nqs = [0.9, 0.5, 0.1]\n\n\n@time \"Plot monthly quantile\" begin\n    p_month_RR = [scatter(ytickfontsize=11) for j = 1:D]\n    for j = 1:D\n        for (α, per) in enumerate([[0, 100], [25, 75]])\n            for (cc, q) in enumerate(qs)\n                errorline!(p_month_RR[j], [quantile(month_rain_simu[j, i][:, m], q) * conversion_factor for m in 1:12, i in 1:Nb], label=:none, alpha=0.15 * α^2, centertype=:median, errortype=:percentile, percentiles=per, groupcolor=my_palette(length(qs))[cc])\n            end\n        end\n        for q in qs\n            scatter!(p_month_RR[j], m -> quantile(month_rain_histo[j][:, m], q) * conversion_factor, 1:12, label=:none, ms=2, c=:blue)\n            plot!(p_month_RR[j], m -> quantile(month_rain_histo[j][:, m], q) * conversion_factor, 1:12, label=:none, c=:blue)\n        end\n        xticks!(p_month_RR[j], 1:12, string.(first.(monthabbr.(1:12))), xtickfontsize=8)\n    end\n    [ylabel!(p_month_RR[j], \"Rain (mm/month)\", ylabelfontsize=12) for j in staid_lat[[1, 6]]]\n\n    [title!(p_month_RR[j], station_name[j], titlefontsize=12) for j = 1:D]\n    pall_month_RR = plot(p_month_RR[staid_lat]..., size=(1500, 600), layout=(2, 5))\n    # savefig(\"save/EDF_like_$(Nb)_simu_monthly_quantile_K_$(K)_d_$(𝐃𝐞𝐠)_m_$(local_order).pdf\")\nend","category":"page"},{"location":"examples/tuto_paper/#Correlations","page":"Set up","title":"Correlations","text":"","category":"section"},{"location":"examples/tuto_paper/#Rain-event-dry/wet","page":"Set up","title":"Rain event dry/wet","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"cor_bin_hist = cor(reduce(hcat, [df.bin for df in data_stations]));\n\ncor_bin_mean_simu = mean(cor(ys[:, :, i]) for i in 1:Nb);\n\n\nbegin\n    plots_cor_bin = [plot(-0.1:0.1:0.8, -0.1:0.1:0.8, aspect_ratio=true, label=:none, xlabelfontsize=16, ylabelfontsize=16, xtickfontsize=10, ytickfontsize=10) for _ in 1:1]\n    scatter!(plots_cor_bin[1], vec_triu(cor_bin_hist), vec_triu(cor_bin_mean_simu), label=\"Correlations\", xlabel=\"Observations\", ylabel=\"Simulations\", c=2)\n    [xlims!(plots_cor_bin[i], -0.1, 1) for i in 1:1]\n    [ylims!(plots_cor_bin[i], -0.1, 1) for i in 1:1]\n    plot(plots_cor_bin...)\nend","category":"page"},{"location":"examples/tuto_paper/#Rain-amount","page":"Set up","title":"Rain amount","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"cor_hist = cor(reduce(hcat, [df.RR for df in data_stations]));\n\n\ncorT_hist = corTail(reduce(hcat, [df.RR for df in data_stations]));\n\n\ncor_mean_simu = mean(cor(rs[:, :, i]') for i in 1:Nb);\n\n\ncorT_mean_simu = mean(corTail(rs[:, :, i]') for i in 1:Nb);\n\n\nbegin\n    plots_cor = [plot(-0.1:0.1:0.8, -0.1:0.1:0.8, aspect_ratio=true, label=:none, xlabelfontsize=16, ylabelfontsize=16, xtickfontsize=10, ytickfontsize=10) for _ in 1:2]\n    scatter!(plots_cor[1], vec_triu(cor_hist), vec_triu(cor_mean_simu), label=\"Correlations\", xlabel=\"Observations\", ylabel=\"Simulations\", c=2)\n    scatter!(plots_cor[2], vec_triu(corT_hist), vec_triu(corT_mean_simu), label=\"Tail index\", xlabel=\"Observations\", ylabel=\"Simulations\", c=3)\n    [xlims!(plots_cor[i], -0.1, 1) for i in 1:2]\n    [ylims!(plots_cor[i], -0.1, 1) for i in 1:2]\n    plot(plots_cor...)\n    # savefig(\"full_cor_hist_vs_1000_mean_simu.pdf\")\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"","category":"page"},{"location":"examples/tuto_paper/","page":"Set up","title":"Set up","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#StochasticWeatherGenerators.jl","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"Documentation for StochasticWeatherGenerators.jl","category":"page"},{"location":"#Index","page":"StochasticWeatherGenerators.jl","title":"Index","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"Modules = [StochasticWeatherGenerators]","category":"page"},{"location":"#SmoothPeriodicStatsModels.fit_mle_stations-Tuple{DataFrames.DataFrame, Vararg{Any, 4}}","page":"StochasticWeatherGenerators.jl","title":"SmoothPeriodicStatsModels.fit_mle_stations","text":"fit_mle_stations(df::DataFrame, K, T, degree, local_order)\n\nGiven a\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.VCX3","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.VCX3","text":"VCX3(y, idxs; nb = 3)\n\nYearly Max of nb = 3 days sliding mean for y. Here idxs can be a vector of vector (or range) corresponds to the index of every year.\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\nyear_range = unique(year.(time_range))\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nidx_year = [findall(x-> year.(x) == m, df[:, :DATE]) for m in year_range]\nVCX3(df.Temperature, idx_year)\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.VCX3-Tuple{DataFrames.DataFrame}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.VCX3","text":"VCX3(df; y_col, nb = 3)\n\nYearly Max of nb = 3 days sliding mean for y for every year.  By default, y_col is the first column not with a Date type\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nVCX3(df)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.collect_data_ECA","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.collect_data_ECA","text":"collect_data_ECA(STAID, date_start::Date, date_end::Date, path::String, var::String=\"RR\"; portion_valid_data=1, skipto=19, header = 18, return_nothing = true)\n\npath gives the path where all data files are stored in a vector\nFilter the DataFrame s.t. date_start ≤ :DATE ≤ date_end\nvar = \"RR\", \"TX\" etc.\nportion_valid_data is the portion of valid data we are ok with. If we don't want any missing, fix it to 1.\nskipto and header for csv files with meta informations/comments at the beginning of files. See CSV.jl.\nreturn_nothing if true it will return nothing is the file does not exists or does not have enough valid data.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.collect_data_ECA-2","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.collect_data_ECA","text":"collect_data_ECA(STAID::Integer, path::String, var::String=\"RR\"; skipto=19, header = 18)\n\npath gives the path where all data files are stored in a vector\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.corTail","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.corTail","text":"corTail(x::AbstractMatrix, q = 0.95)\n\nCompute the (symmetric averaged) tail index matrix M of a vector x, i.e. M[i, j] = (ℙ(x[:,j] > Fxⱼ(q) ∣ x[:,i] > Fxᵢ(q)) + ℙ(x[:,i] > Fxᵢ(q) ∣ x[:,j] > Fxⱼ(q)))/2 where Fx(q) is the CDF of x. Note it uses the same convention as cor function i.e. observations in rows and features in colums.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.cor_groupby-Tuple{DataFrames.DataFrame, Any, Any, Integer}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cor_groupby","text":"Compute and fit the `cor` between two `var` with a smooth function for each `z`.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.cor_groupbyTXTN-Tuple{DataFrames.DataFrame, Integer}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cor_groupbyTXTN","text":"Compute and fit the `cor` between `:TX` and `:TX-:TN` with a smooth function for each `z`.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.cov_RR-Tuple{AbstractArray{<:DataFrames.DataFrame}, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cov_RR","text":"cov_RR(dfs::AbstractArray{<:DataFrame}, K)\n\nEach df must have :DATE, :RR, :z (same :z for each df)\n\nΣ²RR = cov_rain(data_stations, K)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.cov_ar1-Tuple{AbstractArray{<:DataFrames.DataFrame}, Any, Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cov_ar1","text":"Fit residual to constant (in time) cov matrices for each weather regime Example:\n\ncov_ar1(data_stations, ar1sTX, :TX, K)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.cum_monthly","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cum_monthly","text":"cum_monthly(y::AbstractArray, idxs)\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\nyear_range = unique(year.(time_range))\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nidx_year = [findall(x-> year.(x) == m, df[:, :DATE]) for m in year_range]\nidx_month = [findall(x-> month.(x) == m, df[:, :DATE]) for m in 1:12]\nidx_all = [intersect(yea, mon) for yea in idx_year, mon in idx_month]\ncum_monthly(y, idx_all)\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.distance_x_to_y-Tuple{Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.distance_x_to_y","text":"distance_x_to_y\n\nDistance in km between two stations.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.dms_to_dd-Tuple{Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.dms_to_dd","text":"dms_to_dd(l)\n\nConvert Degrees Minutes Seconds to Decimal Degrees. Inputs are strings of the form\n\nLAT    : Latitude in degrees:minutes:seconds (+: North, -: South)\nLON    : Longitude in degrees:minutes:seconds (+: East, -: West)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.fit_mle_RR-Tuple{DataFrames.DataFrame, Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.fit_mle_RR","text":"fit_mle_RR(df::DataFrame, K, local_order; maxiter=5000, tol=2e-4, robust=true, silence=true, warm_start=true, display=:none, mix₀=mix_ini(T))\n\nmix_allE = fit_mle_RR.(data_stations, K, local_order)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.joint_rain","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.joint_rain","text":"joint_rain(M::AbstractMatrix, j1::Integer, j2::Integer, r = 0)\n\nSelect all the rows of M with values for (two) colums above some value r.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.longuest_spell-Tuple{AbstractArray}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.longuest_spell","text":"longuest_spell(y::AbstractArray; value=0)\n\nCompute the length of the longuest consecutive sequence of value in y\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.my_color-Tuple{Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.my_color","text":"my_color(k, K)\n\nConvenience for plot colors and hidden states to blue for k=1 (∼wetter)  and orange for k=K (∼driest)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.pmf_spell-Tuple{AbstractVector, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.pmf_spell","text":"pmf_spell(y::AbstractVector, value)\n\nReturn the distribution of spells (consecutive sequence of with the same value) length of value in y\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.rand_RR-Tuple{AbstractArray{<:Distributions.MixtureModel}, AbstractVector, AbstractVector, AbstractArray, AbstractArray}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.rand_RR","text":"rand_RR(mixs::AbstractArray{<:MixtureModel}, n2t::AbstractVector, z::AbstractVector, y::AbstractMatrix, Σk::AbstractArray)\n\nGenerate a (nonhomegenous) sequence of length length(n2t) of rain amounts conditionally to a given dry/wet matrix y and (hidden) state sequence z. Univariate distribution are given by mixs while correlations are given by covariance matrix Σk.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.rand_cond-NTuple{6, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.rand_cond","text":"rand_cond(ϵ, z, θ_uni, θ_cor, n2t, T)\n\nGenererate a random variable conditionnaly to another one Using Copula\n\nX_1 mid X_2 = ϵ sim mathbbNleft(mu_1 + dfracsigma_1sigma_2rho (a - mu_2) (1-rho^2)sigma_1^2 right)\n\nFor two N(0,1)\n\nX_1 mid X_2 = ϵ sim mathbbNleft(rho a  (1-rho^2) right)\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.select_in_range_df-Tuple{Any, Any, Any}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.select_in_range_df","text":"select_in_range_df(datas, start_Date, interval_Date, [portion])\n\nSelect station with some data availability in dates and quality (portion of valid data).  Input is a vector (array) of DataFrame (one for each station for example) or a Dict of DataFrame. If 0 < portion ≤ 1 is specified, it will authorize some portion of data to be missing.\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.shortname-Tuple{AbstractString}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.shortname","text":"shortname(name::String)\n\nExperimental function that returns only the most relevant part of a station name.\n\nlong_name = \"TOULOUSE-BLAGNAC\"\nshortname(long_name) # \"TOULOUSE\"\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.Σ_Kendall2Pearson-Tuple{AbstractMatrix}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.Σ_Kendall2Pearson","text":"Σ_Kendall2Pearson(M::AbstractMatrix)\n\nCompute the Pearson correlation coefficient i.e. the classic one from the Kendall correlation #TODO Add ref\n\n\n\n\n\n","category":"method"},{"location":"#StochasticWeatherGenerators.Σ_Spearman2Pearson-Tuple{AbstractMatrix}","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.Σ_Spearman2Pearson","text":"Σ_Spearman2Pearson(M::AbstractMatrix)\n\nCompute the Pearson correlation coefficient i.e. the classic one from the Spearman correlation #TODO Add ref\n\n\n\n\n\n","category":"method"}]
}
